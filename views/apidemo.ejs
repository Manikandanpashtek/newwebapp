
<!DOCTYPE html>
<html>
<head>
  <script
      src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.0/axios.min.js"
      integrity="sha512-DZqqY3PiOvTP9HkjIWgjO6ouCbq+dxqWoJZ/Q+zPYNHmlnI2dQnbJ5bxAHpAMw+LXRm4D72EIRXzvcHQtE8/VQ=="
      crossorigin="anonymous"
    ></script>
  
    <!-- <script src="/src/SfmcApiHelper.ts"></script> -->
    <title>Library Methods </title>
    <button type="button" id="btnGetOauthToken" class="btn btn-primary"
    onclick="accessTokenGeneration()"> Get Access Token</button>
   
    <!-- <button type="button" id="senderDomain" class="btn btn-primary"
    onclick="senderDomain()">senderdomain</button> -->
    <br><br>
    <button type="button" id="AppUserInfo" class="btn btn-primary"
    onclick="AppUserInfo()">AppUserInfo</button>
    <br><br>
    <button type="button" id="retrivejourneys" class="btn btn-primary"
    onclick=" retrivejourneys()"> retrivejourneys</button>
    <br><br>
    <button type="button" id="retrivejourneysbyid" class="btn btn-primary"
    onclick="retrivejourneysbyid()"> retriveactivejourneysid</button>
    <br><br>
    <button type="button" id="retrievingDataExtensionFolderID" class="btn btn-primary"
    onclick="retrievingDataExtensionFolderID()">retrievingDataExtensionFolderID</button>
    <br><br>
    <button type="button" id="createSparkpostIntegrationFolder" class="btn btn-primary"
    onclick="createSparkpostIntegrationFolder()">createSparkpostIntegrationFolder</button>
<!--         
    <button type="button" id="createdataextension" class="btn btn-primary"
    onclick="createdataextension()">createdataextension</button> -->
    <br><br>
    <button type="button" id="insertrow" class="btn btn-primary"
    onclick="insertRow()">insertRow</button>
    <br><br>
    <button type="button" id="retriverows" class="btn btn-primary"
    onclick="retriverows()">retriverows</button>

    <br><br>
    
</head>
<body>
  <script>
    const queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    const authorization_code = urlParams.get('code');
    console.log("authorization_code",authorization_code);
    // const tssd = urlParams.get('tssd');
    const tssd = "mcj6cy1x9m-t5h5tz0bfsyqj38ky";
    console.log("tssd=",tssd);
    let apptoken ="";

      function accessTokenGeneration(req,res) {
        axios({
          method: "POST",
          url: "/appdemoauthtoken",
          data: {
            authorization_code:authorization_code,
            tssd: tssd
          },
        })
          .then(function (response) {
            console.log("response>>>>",response);

            const appUse =
            {
              oauthToken : response.data.oauthToken
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }

      function AppUserInfo(appUse)
       {
         axios({
           method: "POST",
           url: "/appuserInfo",
           data: { refreshToken: apptoken, tssd:tssd },
 
         })
           .then(function (response) {
             console.log("response in userInfo>>>>",response);
             var test = response.data.username;
               document.getElementById("myInput").value = test;
           })      
        }


      function createSparkpostIntegrationFolder(
        thisdata,
        refreshToken,
        soapInstance,
        memberid,
        ParentFolderID
      ) {
        axios({
          method: "POST",
          url: "/createsparkpostintegrationfolder",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
            ParentFolderID: ParentFolderID,
          },
        })
          .then(function (response) {
            console.log(
              "createSparkpostIntegrationFolder:" +
                JSON.stringify(response.data)
            );
            if (response.data.statusText) {
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({ FolderID: response.data.FolderID });
              domainConfigurationDECheck(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.FolderID
              );
            } else {
              console.log("Error creating data extension folder");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }
      function insertRow(rowData, thisdata) {
        console.log("memberid:" + thisdata.state.member_id);
        console.log("refreshToken:" + thisdata.state.refreshtoken);
        console.log("restInstance:" + thisdata.state.restInstance);
        console.log("soapInstance:" + thisdata.state.soapInstance);
        console.log(
          "De external KEY " + thisdata.state.DEexternalKeyDomainConfiguration
        );
        const userInfobody = {
          tssd: thisdata.state.tssd,
          memberid: thisdata.state.member_id,
          restInstance: thisdata.state.restInstance,
          soapInstance: thisdata.state.soapInstance,
          DEexternalKeyDomainConfiguration:
            thisdata.state.DEexternalKeyDomainConfiguration,
        };
        const data = {
          domainConfigurationData: rowData,
          userInfobody: userInfobody,
          refreshToken: thisdata.state.refreshtoken,
        };
        axios({
          method: "POST",
          url: "/insertrow",
          data: data,
          headers: { "Content-Type": "application/json" },
        })
          .then(function (response) {
            console.log(
              "loadDataForDomainConfiguration:" + JSON.stringify(response.data)
            );
            thisdata.setState({ refreshtoken: response.data.refreshToken });
          })
          .catch(function (error) {
            console.log(error);
          });
      }
      function retrievingDataExtensionFolderID(
        thisdata,
        refreshToken,
        soapInstance,
        memberid
      ) {
        axios({
          method: "POST",
          url: "/retrievingdataextensionfolderid",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            soapInstance: soapInstance,
          },
        })
          .then(function (response) {
            if (response.data.statusText) {
              console.log(
                "retrievingdataextensionfolderid:" + JSON.stringify(response.data)
              );
              thisdata.setState({ refreshtoken: response.data.refreshToken });
              createSparkpostIntegrationFolder(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.ParentFolderID
              );
            } else {
              console.log("Error getting Data extension's folder ID");
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }
            
      function retrivejourneys(){
        const params = {
          refreshToken: newrefreshtoken,
          tssd: tssd,
          memberid: memberid,
          soapInstance: soapInstance,
          restInstance: restInstance,
        };
        axios({
          method: "GET",
          url: "/getactivejourneys",
          params: params,
        })
          .then(function (response) {
            /**
             * Response handling code
             */
          })
          .catch(function (error) {
            /**
             * Error Handling code
             */
          });
        
      }
      function dataFolderCheck(
        thisdata,
        refreshToken,
        memberid,
        restInstance,
        soapInstance
      ) {
        axios({
          method: "POST",
          url: "/datafoldercheck",
          data: {
            refreshToken: refreshToken,
            tssd: thisdata.state.tssd,
            memberid: memberid,
            restInstance: restInstance,
            soapInstance: soapInstance,
          },
        })
          .then(function (response) {
            console.log("datafolder:" + JSON.stringify(response.data));
            if (response.data.statusText) {
              console.log("memberid:" + thisdata.member_id);
              console.log("refreshToken:" + thisdata.refreshtoken);
              console.log("restInstance:" + thisdata.restInstance);
              console.log("soapInstance:" + thisdata.soapInstance);

              thisdata.setState({ refreshtoken: response.data.refreshToken });
              thisdata.setState({ FolderID: response.data.FolderID });
              domainConfigurationDECheck(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id,
                response.data.FolderID
              );
            } else {
              retrievingDataExtensionFolderID(
                thisdata,
                response.data.refreshToken,
                response.data.soap_instance_url,
                response.data.member_id
              );
            }
          })
          .catch(function (error) {
            console.log(error);
          });
      }
      function createFolder(
  thisdata,
  refreshToken,
  soapInstance,
  memberid,
  ParentFolderID
) {
  axios({
    method: "POST",
    url: "/createfolder",
    data: {
      refreshToken: refreshToken,
      tssd: thisdata.state.tssd,
      memberid: memberid,
      soapInstance: soapInstance,
      ParentFolderID: ParentFolderID,
    },
  })
    .then(function (response) {
      console.log(
        "createSparkpostIntegrationFolder:" + JSON.stringify(response.data)
      );
      if (response.data.statusText) {
        thisdata.setState({ refreshtoken: response.data.refreshToken });
        thisdata.setState({ FolderID: response.data.FolderID });
        domainConfigurationDECheck(
          thisdata,
          response.data.refreshToken,
          response.data.soap_instance_url,
          response.data.member_id,
          response.data.FolderID
        );
      } else {
        console.log("Error creating data extension folder");
      }
    })
    .catch(function (error) {
      console.log(error);
    });
} 
     
   function creatingDomainConfigurationDE(req,res)
 
  {
    var dataextensionname = document.getElementById("txt").value;
    console.log("dataextensionname=",dataextensionname);
   //  console.log("methodcalled");
        axios({
          method: "POST",
          url: "/creatingDomainConfigurationDE",
          data: {
           dataextensionname : dataextensionname,
            soap_instance_url: "https://mcj6cy1x9m-t5h5tz0bfsyqj38ky.soap.marketingcloudapis.com/",
           
          },
         
        })
          .then(function (response) {
            console.log(
              "creatingDomainConfigurationDE:" + JSON.stringify(response)
            );
            document.getElementById("demo2").innerHTML = "dataextension created";
            document.getElementById("demo4").innerHTML = JSON.stringify(response);
            // if (response.data) {
        
            //   thisdata.setState({
            //     DEexternalKeyDomainConfiguration:
           //       response.data.DEexternalKeyDomainConfiguration,
            //   });
            
            // } else {
            //   console.log("Error creating data extension folder");
            // }
          })
          .catch(function (error) {
           document.getElementById("demo3").innerHTML = "dataextension not created";
            console.log(error);
          });
      }
      
    
 function retrivejourneysbyid()
      {
       axios({
       method: "POST",
       url: "/getJourneysById",
       data: {
      journeyId: response.data.journeys.items[i].id,
      name: response.data.journeys.items[i].name,
      status: response.data.journeys.items[i].status,
      version: response.data.journeys.items[i].version,
      refreshToken: journeyrefreshtoken,
      tssd: tssd,
      memberid: memberid,
      soapInstance: soapInstance,
      restInstance: restInstance,
  },
})
  .then(function (response) {
    /**
     * Response Handler of Get Journeys by id
     */
  })
  .catch(function (error) {
    /**
     * Error Handler of Get Journeys by id
     */
  });
 }
function domainConfigurationDECheck(
  thisdata,
  refreshToken,
  soapInstance,
  memberid,
  FolderID
) {
  axios({
    method: "POST",
    url: "/dataextensioncheck",
    data: {
      refreshToken: refreshToken,
      tssd: thisdata.state.tssd,
      memberid: memberid,
      soapInstance: soapInstance,
      FolderID: FolderID,
    },
  })
    .then(function (response) {
      console.log("domainConfigurationDECheck:" + JSON.stringify(response));
      if (response.data) {
        thisdata.setState({ refreshtoken: response.data.refreshToken });
        thisdata.setState({
          DEexternalKeyDomainConfiguration:
            response.data.DEexternalKeyDomainConfiguration,
        });
      } else {
        console.log("Error creating data extension folder");
      }
    })
    .catch(function (error) {
      console.log(error);
    });
}

function retriverows()
{
  const domainvalue = {
    refreshToken: this.state.refreshtoken,
    tssd: this.state.tssd,
    memberid: this.state.member_id,
    restInstance: this.state.restInstance,
    soapInstance: this.state.soapInstance,
    FolderID: this.state.FolderID,
  };
  axios({
    method: "POST",
    url: "/retrievingDataExtensionRows",
    data: domainvalue,
  })
    .then(function (response) {
      /**
       * Response manupulation operations code
       */
    })
    .catch(function (error) {
      /**
       * Error handling code.
       */
    });
  
}      
        
</script>
</body>
</html>
   
